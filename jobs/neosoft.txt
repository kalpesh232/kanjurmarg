1. what is abstraction and encapsulation?
-> Abstraction
Abstraction is a fundamental concept in object-oriented programming (OOP) that involves hiding the complex 
implementation details and showing only the necessary features of an object. 
In Python, abstraction can be achieved through abstract classes and interfaces.
An abstract class in Python is a class that cannot be instantiated on its own
It may contain abstract methods, which are methods without a body.
Abstract base classes allow you to define a common interface for a set of subclasses.

-> Encapsulation 
Encapsulation in Python is like putting data and the actions that work on that data into a box called a class. This helps to organize and protect the data, keeping some parts private (like a secret, using double underscores) and others protected (handle with care, using a single underscore). The double underscore makes it harder to access and modify, acting as a stronger form of protection. It stops accidental messing up of data, making our code safer and more organized.

-> Method Overloading
In Python, you can create multiple functions with the same name but different arguments or numbers, a concept known as function overloading.  it's not supported in Python. This limitation exists because Python is an interpreted language.

-> Method overriding
Method overriding is an ability of any object-oriented programming language that allows a subclass or child class to provide a specific implementation of a method that is already provided by one of its super-classes or parent classes.

->  Handle Exceptions 
you can handle exceptions using try and except blocks. If you want to prevent errors from disrupting your program flow or hide them from clients, wrap the code in a try block. If an error occurs, the except block will be executed, allowing you to customize a response or perform other actions.

-> With
In Python, the with statement is like a helper for managing resources, such as files. It makes sure that things are set up and cleaned up properly around a block of code.
The code without with  manually opens, reads, and closes a file. The  code, using with, automatically takes care of opening and closing the file, making the code cleaner and less prone to mistakes

-> Logging 
In Flask, you can use the Python logging module to keep track of different types of events and errors in your application. There are several levels like notset, debug, info, error, and critical. If you set the logging level , for example, info, it will include logs of info level and above (like error and critical), but it will ignore debug and lower levels

-> Immutable String
Yes, in Python, strings are immutable. This means that once you create a string object, you cannot change its content. If you want to modify a string, you need to create a new string with the desired changes.

-> Flask blueprint
A Flask Blueprint is a way to organize a Flask web application into smaller, reusable parts. It helps break down the code into manageable sections for better organization and maintenance. Blueprints can have their own routes, templates, and static files. They are registered with the main application to add their functionality

->  session.commit() and session.flush() 

-: session.commit():
The commit() method is used to save any changes made during the current session to the database.
When you add, update, or delete objects within a session, those changes are not immediately reflected in the database. Committing the session makes those changes permanent.
It is typically used at the end of a logical unit of work or a transaction.

-: session.flush():
The flush() method is used to synchronize the session's state with the database, but it doesn't commit the transaction.
It pushes any pending changes in the session to the database, allowing you to see the effects of those changes within the same transaction.
Unlike commit(), flush() doesn't end the transaction, so you can continue making changes before eventually committing.

->  Global Interpreter Lock (GIL)
The Global Interpreter Lock (GIL) in Python is like a traffic cop for threads. It makes sure only one thread can execute Python code at a time, preventing conflicts and simplifying certain aspects of memory management. While it helps with simplicity, it can limit the performance of multi-threaded programs on multi-core computers.

->  Django, signals
In Django, signals are a way for different parts of your app to talk to each other. They allow one part to send a message when something happens, and other parts can listen for that message and react to it. It helps keep different parts of your app loosely connected, making it easier to change and maintain. For example, when you save something in the database, a signal can be sent, and other parts can respond to it, like sending a notification.

-> Generators over  for loop 
Generators in Python are memory-efficient because they produce values on-the-fly, one at a time, as you iterate over them. They don't store the entire sequence of values in memory all at once, unlike a regular for loop. This is especially helpful when working with large datasets, as it avoids using excessive memory since values are generated only when needed during iteration.

->  synchronize and asynchronize

- Synchronous:
Things happen one at a time, in a specific order.
Step-by-step, one after the other.
Example: Like waiting for your turn in a line.

- Asynchronous:
Things can happen independently, not necessarily in a specific order.
Things happening independently, not strictly in order.
Example: Like sending messages and doing other things while waiting for replies.

-> "list" and "array"

- List:
In Python, a list is a built-in data type that represents a collection of items.
Lists are versatile and can contain elements of different data types.
Elements in a list are accessed by their index.
Lists support various operations like appending, slicing, and more.

- Array:
The term "array" is sometimes used to refer to a list in Python. In everyday Python programming, when people talk about arrays, they often mean lists.
In a more formal sense, an array may refer to the array module in Python, which provides a compact array of items of the same type. This is similar to a list but with a more restrictive structure.
